Miriad is a radio-astronomy data reduction package. It was originally
developed to meet the needs of the BIMA consortium, although ATNF is also
developing it further.

Please read the file DISCLAIMER to see a legal disclaimer.

Miriad is portable to a variety of UNIX machines as well as VMS.  The
notes below describe how to install it on a UNIX machine.  The
distribution contains installation scripts for SunOS 4.x and SunOS 5.x
(also called Solaris 1 and Solaris 2 respectively), ConvexOS, IRIX and
IRIX64, LINUX, OSF/1 or Digital UNIX, HPUX, the Mac Darwin OS and UNICOS. 

The FTP and web point to the same place, which contain both compressed
and uncompressed versions of the tar distribution file -- these tar files
contain no binaries. These distributions are updated weekly.

The FTP and Web areas also contain the users and programmers guides
as separate files (these are also in the distribution). The Web pages
contain hypertext versions of the documentation.

					miriad@antf.csiro.au

========================================================================

Instructions for Installing Miriad
==================================

**************************************************************************
*** Please see the end of this note for some system-dependent comments ***
**************************************************************************

0)  Get a copy of the Miriad distribution.
    A Miriad installation is available from the web:

    Anonymous ftp:  Host:      ftp.atnf.csiro.au
                    Directory: /pub/software/miriad
                    File:      miriad.tar.Z, miriad.tar.gz or miriad.tar

    or Web URL:     http://www.atnf.csiro.au/computing/software/miriad
	            Click on "Distribution,installation and update info"

    Alternatively, if you have access to our machines, you can generate a 
    tar file yourself with the desired binaries. You can create a tar file of
    the Miriad environment with the command

	% mirtar device arch

    where "device" is the output device or tar file name, and
    "arch" (machine architecture) can be one of: all, none or a machine
    type. The "arch" argument determines which executables and object
    libraries (if any) are written to the tar tape/file.

    For example

	% mirtar /dev/nrst0 all

    will write Miriad source and binaries for all the architectures that we
    have binaries for. To see the supported architectures, use "mirtar"
    without any arguments.

    NOTE: Problems with operating system/compiler/shared library mismatches
    can cause binaries that work on one machine NOT to run on another
    very similar machine. If you take binaries -- good luck -- but it is
    moderately likely that you will have to recompile anyway.

1)  Untar the distribution in a target directory. This directory should be
    the root directory where you want to install miriad. e.g. if your root
    directory for miriad is /usr/local/miriad, and miriad is on a tar
    on device /dev/nrst0, use

      cd /usr/local/miriad
      tar -xvf /dev/nrst0

    The source, manuals, etc take up about 15 Mbytes. The executables and
    libraries take up about 50 Mbytes on a Sun4, and 90 Mbytes on a Convex C2
    (these do not use shareable libraries).

    We use the environment variable $MIR to indicate this root directory.

2)  Most of the work of installing is done by the "Install"
    script in Miriad's root directory. However Miriad relies on some
    external libraries. Although Install looks in many places, it will
    not find libraries squirreled away in unlikely places. To ensure that
    Install finds the appropriate libraries, before running Install you should
    set the environment variable LD_LIBRARY_PATH to a directory search
    list (a colon-separated list of directories to be searched for
    libraries). e.g. if you keep your libraries in subdirectories
    "lib" and "X11/lib" of the directory "/obscure", then

      setenv LD_LIBRARY_PATH /obscure/lib:/obscure/X11/lib

    The directories are searched in the order given (left to right).

    If you lack (and need!) any of the libraries mentioned below,
    install them before running the Install script! If you have to build
    them yourself, you will need to put the library in a directory where
    the Install script can find them. The simplest place is the miriad library
    directory (pointed to by environment variable $MIRLIB).

    * The PGPLOT plotting library is used by a significant number of tasks.
      Miriad requires PGPLOT version 5.0 or later. See the installation
      notes that come with PGPLOT on how to install it.

      PGPLOT may depend on other libraries (e.g. probably the X11 libraries).

      PGPLOT is available from

      ftp://ftp.astro.caltech.edu/pub/pgplot/pgplot5.2.tar.gz

      which is a gzip'd tar file. Tim Pearson (tjp@astro.caltech.edu) can
      give advice on PGPLOT.

      The tar distribution for Miriad also comes with this distribution,
      (subdirectory pgplot). However if you already have an up-to-date copy,
      you will probably want to disregard (or delete) the Miriad copy.

    * X11 libraries: In addition to PGPLOT, the tools xmtv and xpanel use
      the X11 system. PGPLOT usually requires purely libX11.a, whereas
      xmtv and xpanel require Athena widgets and other X11 libraries.
      Instructions on installing X11 are beyond the scope of this note!

    * The ATLOD task (and only ATLOD) uses the ATNF RPFITS library.
      If you want the ATLOD task, you will have to install the RPFITS
      library. The Miriad distribution comes with only the
      binary library for the RPFITS library -- depending on your
      system, this may be adequate.

      However compiler/library incompatibilities between your system and
      ours may exist. If the binary libraries (as shipped) are not adequate
      for your system, source code are available from

      ftp://ftp.atnf.csiro.au/pub/software/rpfits.

      Also see

      http://www.atnf.csiro.au/computing/software/rpfits

      Installing RPFITS should be straightforward. Having installed it, you
      should copy the include, rpfits.inc, that comes with the
      distribution to the Miriad include file are, $MIR/inc

        % cp rpfits.inc $MIR/inc

      Advice is available from Vince McIntyre (vmcintyr@atnf.csiro.au).

    * The "miriad" front-end can use the GNU READLINE library to allow
      command line editting. This is very useful. If you fail to have
      the readline libraries, the front-end will still work -- but it
      will not have command-line editting. A binary copy of the readline 
      library comes with this distribution. However, system incompatibilities
      may make this of little value. A copy of the readline source
      is available as

      ftp://prep.ai.mit.edu/pub/gnu/readline-4.0.tar.gz.

      Rumour has it that the BASH shell comes with a version of the readline
      library that is different to the above. This version may require you
      to link with both libreadline and libhistory. Be warned. Also some
      old versions of the readline library require the compiler switches
      "cc -32 -D_BSD_SIGNALS" on the irix64 operating system.

      Linking with the readline library also needs either the termcap or
      ncurses library. Make sure that the Install script can find one of
      these if you are going to use the readline library.

    If you lack some of the above libraries (rpfits, readline, Athena
    widgets) and are disinclined to install them, see "Special case tasks"
    below for a possible solution.

3)  Well-supported machine architectures include:

	SunOS 4.x, SunOS 5.x, Convex, IRIX, IRIX64, OFS1/Digital UNIX, Linux,
	HPUX, UNICOS, Mac Darwin.

    If you are using one of these, *in principle*, you need to
    change your directory to the Miriad root directory, and run

	% ./Install

    This prompts you with a number of questions. Hopefully these are
    largely self-explanatory. Depending on some answers, and whether
    some libraries can be found, some questions may be skipped, or extra ones
    may appear.

    The operations performed by Install are not "destructive" -- you
    can rerun Install without causing damage or confusion.

    The questions are:

    - "Change MIRRC to use a different root directory". You will normally
      say yes the first time (and no on any possible subsequent runs).

    - "Give the root directory name". This defaults to the your current
      directory, but you might want to explicitly give the name of the
      current directory in a more digestible form than the pwd command
      can produce.

    - "Re-generate the mirfind script" and then
      "Re-generate the mirlibs script". Normally answer yes. However if
      you are rerunning Install and have already made a good version of
      mirfind and/or mirlibs (either automatically or by hand), then answer no.

    - "Does the PGPLOT library need Xwindows". Normally answer yes.

    - "Is this OK". This is asking whether the link list (the libraries
      and options used to link a Miriad task) are OK. If the link list is
      not OK, then answer no, and edit the file "mirlibs.csh" by hand, and
      then copy it to the directory $MIR/scripts/unix/$arch. See note 11
      below for information on mirlibs. It is then safe to rerun
      Install.

    - "Rebuild the Miriad library/tasks from scratch". You will only
      get this question if you have a binary distribution or are
      rerunning Install. Answer no if you think that the binaries
      are probably in good shape. Also answer no, if you are re-running 
      Install after the build failed mid-way through (eg during liking).

    The script starts to build the bulk of Miriad at this stage. This
    can take quite a while...

    If all has gone well, you will eventually get the question:

    - "Record update time". And you can answer yes.

    If there has been a problem, the compilation will usually terminate
    with a error such as:

    Processing /applic/miriad/prog/cgdisp.for
    Number of lines = 4496; number of routines = 25
    /usr/bin/ld: cannot find -lpgplot
    collect2: ld returned 1 exit status
    ### /applic/miriad/bin/linux/mirclnk /applic/miriad/prog/cgdisp.for: returned with status=256

    In this case, you should stop the install (answer no to the "Build
    special tasks" question) and work out what the problem is. We really
    should have a "Trouble shooting FAQ". We don't. But feel free to 
    email miriad@atnf.csiro.au for help!! 

    - "Build special tasks". Generally answer yes to this.

    After this, it tries to build a few special programs. If something
    goes wrong with building the special tasks, see Note 14.

    If something goes wrong, it is safe to re-run the Install script

4)  Having build the Miriad system, you will the UNIX system to
    automatically initialise the Miriad environment when you log in.
    In your .login file, add the lines

        source  miriad-root-directory/bin/MIRRC 
                                         (MIRRC.sh for Korn/sh/bash shells)
	set path = ($MIRBIN $path)

    to make sure your get the appropriate Miriad definitions whenever
    you log in. In the above "miriad-root-directory" is the name of
    the directory where you installed Miriad.

    For many sites, the installation is complete. Read further only if
    you have had problems installing Miriad, or if you want to re-build
    individual subroutines or programs, etc.

========================================================================

Getting Regular Updates
=======================

    Having installed a current version of Miriad, you can readily keep this
    up-to-date -- provided your machine can ftp to the ATNF.

    To bring your machine up-to-date, simply use

      % mirimport

    This ftps across any needed updates and then unpacks and installs
    them. Only use this command if you have write access to the
    Miriad area, and if you are set up to compile etc.

    This can be simply done, periodically, as a cron job. Note the
    cron job should:

        * Set up its environment so that the Miriad executables are in
          its path, and that the Miriad environment variables are defined.
          People unfamiliar with cron jobs, and the difference between .cshrc
          and .login might find this step more involved than it appears!

        * Execute the c-shell script.
             mirimport

       For example, the crontab commands might look like

       30 22 * * 4 csh%source /miriad/bin/MIRRC%mirimport

       This runs at 10:30 pm on Thursdays, uses the c-shell, sets the Miriad
       environment, and runs mirimport.

    Although the update process is conveniently down automatically, it can
    also be done by hand.

========================================================================

Rebuilding individual tasks/subroutines.
========================================

    The easiest way to recompile/relink individual tasks/subroutines
    is to use the Miriad script "mirupdate". This checks all relevant
    source code for something that has been modified or "touched" since
    mirupdate was last used.

    For example, to update task $MIR/prog/example.for, touch the file and
    then run mirupdate.

       % touch $MIR/prog/example.for
       % mirupdate

    It should give various messages about building "example", and finally ask

       Record update time:

    If all has gone OK, answer yes.

========================================================================

Special case tasks
==================

    For tasks that require special libraries (atlod needs rpfits;
    miriad can be linked with readline; xpanel and xmtv need
    Athena widgets), a collection of statically linked versions
    exist in 
      ftp://ftp.atnf.csiro.au/software/miriad/bindir
    The files there have (hopefully!) names which makes their
    contents obvious. Each file is a compressed tar file. Having
    retrieved them (ftp in binary mode!), uncompressed and untared,
    you should then move the executable to $MIRBIN and any .doc file
    to $MIRPDOC. For example:

       uncompress atlod.sun4sol.Z
       tar -xvf atlod.sun4sol
       mv atlod $MIRBIN
       mv atlod.doc $MIRPDOC

========================================================================

The Structure of Miriad
=======================

   We digress here to outline the structure of Miriad. Miriad consists of
   a largish number of independent executables. Most executables will function
   without the presence of any other parts of Miriad. If your interest in
   Miriad is limited to a very small subset of tasks, these are the only
   executables that you will need to compile.

   The scripts that compile Miriad and keep it up to date are similarly
   does not have a list of source files built into it. They work by
   assuming all code in a few particular directories is to be compiled
   and either added to a library, or linked into an executable. If you
   do not want a particular set of tasks, simply delete them from the
   tasks directory before you start to build the system (or delete
   their executables afterwards if you find out later that a particular
   task is not of interest).

   Miriad directory structure. The current directory structure is as
   follows. The contents of the first three directories are generated
   from the other directories.

    $MIR/bin/$arch	Executables.
        /lib/$arch	Libraries and some time-stamp files.
	/doc		On-line help.

    The followign directories contain the "source" from which the 
    system is generated.
	/cat		  Miscellaneous tables, etc, used by tasks and
			  users
	/spec		  Special-case source programs.
	     /*		  Various special-case programs.
	/specdoc	  Special-case documentation files.
	/inc		  A few include files.
	/linpack	  LINPACK source code.
	/bindir           Directory of some binaries.
	/pgplot		  PGPLOT distribution.
        /guides		  Miriad manuals -- in LaTex and Postscript.
	    /user	  Users guide.
	    /prog	  Programmers guide.
	/scripts	  General scripts.
		/unix     Unix-specific scripts.
		     /sun4    Scripts specific to Sun machines running old SunOS
                     /sun4sol Scripts specific to Sun machines running solaris
		     /convex  Scripts specific to Convex machines.
		     /irix    Scripts specific to Silicon Graphics/IRIX machines.
		     /irix64  Scripts specific to Silicon Graphics/IRIX 64 bit machines.
		     /unicos  Scripts specific to Unicos Crays.
		     /alpha   Scripts specific to DEC OSF/1 Alpha
		     /hpux    Scripts specific to HP-UX machines
		     /linux   Scripts specific to LINUX.
                     /darwin  Scripts specific to Darwin OS.
		/vms	  Scripts specific to VMS.
	/subs		  Miriad subroutines
	     /vms	  Subroutines specific to VMS.
	     /unix	  Subroutines specific to UNIX.
		  /alpha_linux Subroutines specific to DEC OSF/1 Alphas and
			  LINUX.
		  /convex Subroutines specific to Convex UNIX.
		  /unicos Subroutines specific to Unicos UNIX.
		  /hpux	  Subroutines specific to HP-UX.
		  /sgi    Subroutines specific to Silicon Graphics.
		  /bsdvax Subroutines specific to a VAX under BSD Unix.
	/prog		  Miriad tasks.
	/tools		  Additional tools, in C.

    Most of Miriad code is written in fairly standard Fortran-77 and C.
    Miriad, however, uses both a FORTRAN and C preprocessor to add some
    simple language extensions and to aid portability.

    The FORTRAN preprocessor, ratty, needs to be applied to all .for files.
    The FORTRAN extensions are to make some VAX extensions universally
    available, to provide conditional compilation directives (little
    used) and machine-independent compiler optimisation directives. The
    output of ratty generally changes very little from the input, and looks
    like fairly vanilla FORTRAN (with a few VAX extensions).

    The C preprocessor, intf2c (which is in addition to the normal C
    preprocessor) needs to be applied to all .f2c files. Passing standard
    C through it simple prepends a few lines. Intf2c's only use
    is to aid in the calling of C from FORTRAN. A special syntax is used
    for function declarations and their dummy arguments, when these functions
    are to be called by FORTRAN.

    See the preamble comments of ratty.c and intf2c.c for more information.
    It is beyond the scope of this note to mention how ratty and intf2c
    might need to be adapted to support a new architecture. 

    With a modest amount of work, you should be able to get Miriad to
    run on any supposedly POSIX complient (or nearly complient) machine.

    Although most tasks and subroutines exist in the Miriad's standard
    areas (and are updated by the mirupdate script), there are some
    special cases. The source for most of these special cases is found 
    in subdirectories of $MIR/spec. Each subdirectory has a "Build"
    script used to compile and link the task. Machine-specific versions
    of the Build script may exist as well -- e.g. Build.sun4sol

    The Build scripts are all simple and easily adapted to your local
    environment. The only trick in them is that they invoke the
    mirfind script, which attempts to find libraries needed for linking.

    Tasks found in the $MIR/spec area are not automatically updated
    by the mirupdate script. You will need to update them by hand,
    as the need arises.

    Adding a new architecture
    -------------------------

    Miriad is built and updated using one C program (mirnewer - source in the
    directory $MIR/tools) and five C-shell scripts (mirupdate, mircadd, mirclnk,
    mirlibs, mirfind -- source in $MIR/scripts/unix/$arch, where $arch is
    a machine type name). The mirfind and mirlibs scripts are generated
    automatically by $MIR/Install. For a new architecture, you will need to
    develop the other three. You will might need to modify
    $MIR/Install and $MIR/bin/MIRRC to know about your architecture.

    The mirupdate script
    --------------------

    The "mirupdate" script looks for source files which are out of date
    by using "mirnewer". Mirnewer, in turn, invokes "mircadd" and "mirclnk"
    when it finds an out-of-date file.

    The heart of "mirupdate" looks something like:

	doscripts $MIR/scripts/unix{/sun4,}
	dosubs $MIR/subs{/unix/sun4,/unix,} $MIR/linpack
	dotools $MIR/tools
	doprog $MIR/prog
	dodocs $MIR/specdoc

    (check on using curly brackets, {}, in the C-shell if you are not
    familiar with this syntax). Each line consists of a "do" command which
    searches a list of directories for modified source files. It searches
    the directories in order, and if multiple files with the same name
    are found, the one found first is the one that takes precedence. So
    you place the more machine-specific directories earliest in the list.
    This way if you have a machine-specific version of some code (e.g.
    optimised for your machine, or calls the appropriate system services),
    it will be used rather than the more generic version.
    Modify the search lists to your particular needs.

    The mircadd and mirclnk scripts
    -------------------------------

    mircadd and mirclnk invoke compiles, libraries and linkers.
    All compiler flags are built into these two scripts. Both are
    passed the name of a source file (.for, .c, .f2c, .doc, .csh),
    and performs the appropriate action based on the file type.

    mircadd compiles FORTRAN, C or ".f2c" files, and places it the
    binary in the $MIRLIB/libmir.a library.

    mirclnk compiles/links FORTRAN tasks ($MIR/prog) (as well as
    generating .doc files) and C tools ($MIR/tools). Additionally, it
    moves shell scripts and .doc files to the $MIRBIN and $MIRPDOC
    directories respectively.
    
    The MIRRC and Install scripts
    -----------------------------

    $MIR/bin/MIRRC and $MIR/bin/MIRRC.sh sets the root directory, 
    determines the machine architecture and sets various environment
    variables. It is a simple script and easy to adapt.

    Apart from the automatic generation of the mirlibs scripts,
    Install is rather independent in the specific architecture.

    The mirlibs script
    ------------------

    The way that you tell the Miriad compile/link scripts what
    libraries and link switches to use when linking (where these libraries
    are) is done by a trivial script -- "mirlibs". The Install script
    attempts to generate this automatically.

    "mirlibs" is a one-line script, which echos the libraries/switches needed to
    link a Miriad task. It is the ONE and ONLY place where the link
    libraries are mentioned in Miriad's installation scripts. You must
    set this so that tasks can be linked correctly. Typical usage of
    the mirlibs command (within mirclnk) is

        f77 -o $MIRBIN/task task.f `mirlibs`

    Typically mirlibs will look something like

      #!/bin/csh -f
      echo $MIRLIB/libmir.a -lpgplot -lm -lX11

    which indicates that the Miriad library (libmir.a), plus the PGPLOT
    library and some libraries needed by PGPLOT.

    All flags, etc, appropriate for the linker can be used in
    mirlibs. As well as a list of libraries, mirlibs may, for example, include
    the -L switch to indicate a directory to search for libraries.


    Customising the Problem Size
    ----------------------------

    The include file, $MIRINC/maxdim.h, gives some parameters which
    set the maximum sized problems that Miriad can cope with. Increase
    the values set here if your site needs to work with bigger problems.
    Decrease the values if you are short of swap space or memory. No
    code allocate memory which is more that a few times any of the
    parameters in the maxdim.h file (i.e. there are no arrays of size
    MAXDIM**2, MAXDIM being the maximum dimension of an image). Miriad
    programs generally dynamically allocate memory when needed.

    Some exceptions are tasks that use the include file $MIRINC/tmpdim.h
    This is similar to maxdim.h, except the values are invariably set
    to smaller numbers. This is as programs which use this include file
    do statically declare arrays of size MAXDIM**2 or similar.

    In summary, you may wish to edit the parameter settings in maxdim.h
    and tmpdim.h to reflect your problem sizes and memory availability.

    Parameters in maxdim.h:
	MAXBUF  -- Maximum general scratch buffer size. The value of this
		   is much less critical than you might expect, as most
		   scratch buffers are allocated dynamically.
	MAXDIM  -- Maximum image dimension.
	MAXCHAN -- Maximum number of spectral channels.
	MAXANT  -- Maximum number of antennas.
	MAXBASE -- Maximum number of baselines (normally derived from MAXANT).
	MAXWIN  -- Maximum number of simultaneous frequency bands ("windows").
	MAXWIDE -- Maximum number of wideband channels (Hat Ck specific).

     Trouble shooting
     ----------------
     If "mirupdate" successfully finishes compiling the subroutines, but starts
     to fail to link the tasks, interrupt it! At this stage try to compile
     and link a task by hand. e.g. to compile prthd, use

       % fortran -o $MIRBIN/prthd prthd.for `mirlibs`

     When you have sorted out the problem (perhaps mirlibs was inappropriate)
     use the following commands to proceed without having to start from 
     scratch:

       % touch $MIRLIB/Last_update
       % touch $MIR/prog/*
       % mirupdate

    This causes the time-stamp file (Last_update) to be more recently
    modified than the subroutines, but the programs appear to have
    been modified even more recently.


========================================================================

System-Dependent Issues
=======================

NOTE: If you have to change any of Miriad's scripts, do so for those
pieces of code in $MIR/scripts/unix of $MIR/scripts/unix/$arch. Note
that changing scripts in the directory $MIRBIN will get overwritten
by the Install and mirupdate scripts.

GNU Compilers and f2c
---------------------
Miriad has been successfully build using the gcc and g77 compilers. The
installation scripts use the commands "cc" and "f77" to compile C and
FORTRAN code respectively. If your system uses different names to these,
you will need to edit the mirclnk.csh and mircadd.csh scripts in 
$MIR/scripts/unix/$arch to use the correct names.

If you are using g77, and depending on the particular version/variant of g77, 
you may want to use the compiler switch

   -ff90-intrinsics-hide

which turns off g77's knowledge of FORTRAN-90 intrinsic functions
(g77 gets confused when some Miriad routines happen to have the same
name as these intrinsics). Some other f77/cc switchs may need to change
as well. If modifying the sun4sol scripts to work with
g77, you will want to remove the "-libmil" switch, and perhaps replace "-O2"
with "-O".

Our experience with FORTRAN compilers based on "f2c" is not entirely
positive. Tasks "atlod" is believed to fail to work
properly when using f2c-based compilers. g77 seems more reliable,
but still not perfect.

LINUX
-----
See comments above on GNU compilers.

Additionally, the FORTRAN compiler can be known as 
"f77", "g77" or "fort77", depending on the software you have. There are
problems with what are believed to be compiler and library bugs on various
variants of LINUX. There problems are rarely reproducable on other LINUX
systems, so it appears that the compiler/library bugs are created and
corrected quite rapidly.

IRIX
----
The compilers are buggy. Be on your guard. Do not use optimisation.

IRIX64
------
The FORTRAN optimiser is very buggy. I recommend that you do not use
optimisation above -O0.

On our IRIX64 machine, the system library complib.sgimath contains BLAS,
LINPACK and FFT routines. If your machine does not have this library,
you will need to modify the file $MIR/scripts/unix/sgi/mirupdate.csh.
See the comments in that file (look for the double
exclamation marks -- !!). You will also have to exclude -lcomplib.sgimath
from the mirlibs script.

SunOS 5.x (Solaris 2.x)
-----------------------
You must have /usr/ccs/bin in your path to find ar, ld, etc.

The /usr/ucb cc and f77 compilers should not be used. They do not work!!

Sun's /opt/SUNWSpro/bin compilers should be used (make sure this is
in the path ahead of /usr/ucb!!).

DEC OSF/1 or Digital UNIX
-------------------------

On some DEC OSF/1 systems, in linking some tasks, you can get
messages like ...
Assertion failed: 0, file ../../../../../../src/usr/ccs/lib....

It seems that this is a known bug with the OSF/1 V3.2 operating
system. I am told the workarounds are:

   o Install patch ID OSF320-094, which gives you a new linker, or
   o Disable all optimization when compiling, or
   o Upgrade to Digital Unix.

Another work around, that the build script tries when a link operation fails,
is to retry linking but with switches to produce static executables. 
This works sometimes, but not others.  You may also play with whether the
libraries used in linking (e.g. PGPLOT) are static or not. 

UNICOS
------
The FORTRAN compiler has the option to use either 64-bit or 128-bit
values for DOUBLE PRECISION numbers. The 64-bit option MUST be used
as the C compiler only supports this mode.

Currently the atlod task does not work on UNICOS.
