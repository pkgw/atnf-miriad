/************************************************************************/
/*									*/
/*	This converts from a FORTRAN calling sequence into a C.		*/
/*									*/
/*  History:								*/
/*    rjs  Dark ages Original version.					*/
/*    rjs  23aug89   Change to calling sequence of hdprobe.		*/
/*    rjs   9oct89   Deleted bug,bugno,pack16,unpack16,delay from this	*/
/*		     file. Only file i/o in this file now.		*/
/*    rjs  18oct89   uvselect added.                                    */
/*    rjs  30oct89   PAD call in hisread fixed                          */
/*    rjs   1nov89   Fixed bug that had crept in during multiflow port.	*/
/*    rjs  15nov89   Added dexpand.					*/
/*    rjs  23apr90   Changed order of #include "io.h" and fortran.h,	*/
/*		     for UNICOS.					*/
/*    rjs  27apr90   Added hdelete.					*/
/*    rjs  17oct90   Fixed bug in hwritea.				*/
/*    rjs  22feb91   Added uvmark.					*/
/*    rjs  27mar91   Added uvwflgwr.					*/
/*    rjs  26mar92   Added uvsela.					*/
/*    rjs  24aug92   Deleted uvmark, added				*/
/*		     uvvarini,uvvarset,uvvarcpy,uvvarupd		*/
/*    rjs  21dec92   Rewritten using intf2c syntax.			*/
/*    rjs   3mar93   Add uvflush,hflush.				*/
/*    rjs  26aug93   Add hrm and habort.				*/
/*    rjs  30aug93   Add hseek and htell.				*/
/*    rjs   5jan94   Added hmode,hexists.				*/
/*    rjs   5nov94   Correct declaration of hexists, and get rid of	*/
/*		     casting int to char*.				*/
/*    rjs  27feb96   Added xyflush.					*/
/*    rjs  19mar97   Handle logical translation better. Tidying.	*/
/*    rjs  01jan05   Changes to handle 64-bit offsets.			*/
/*    rjs  18sep05   Changes to handle FORTRAN and C ints differing.	*/
/*    rjs  26nov05   Changes to handle FORTRAN and C logicals differing.*/
/************************************************************************/
#include <strings.h>
#include <sys/types.h>
#include <unistd.h>
#include <limits.h>
#include "miriad.h"
#include "sysdep.h"


/************************************************************************/
fortran integer function dexpand(character template,character output)
{
  return(dexpand_c(template.zterm,output.addr,output.len));
}
/************************************************************************/
fortran subroutine scropen(integer handle)
{
  int temp;
  scropen_c(&temp);
  *(handle.addr) = temp;
}
/************************************************************************/
fortran subroutine scrclose(integer handle)
{
  scrclose_c(handle.val);
}
/************************************************************************/
fortran subroutine scrread(integer handle,real buffer,
	integer offset,integer length)
{
  scrread_c(handle.val,buffer.addr,(off_t)offset.val,length.val);
}
/************************************************************************/
fortran subroutine scrwrite(integer handle,real buffer,
	integer offset,integer length)
{
  scrwrite_c(handle.val,buffer.addr,(off_t)offset.val,length.val);
}
/************************************************************************/
fortran subroutine uvopen(integer tno,character name,character status)
{
  int temp;
  uvopen_c(&temp,name.zterm,status.zterm);
  *(tno.addr) = temp;
}
/************************************************************************/
fortran subroutine uvtrack(integer tno,character name,character switches)
{
  uvtrack_c(tno.val,name.zterm,switches.zterm);
}
/************************************************************************/
fortran subroutine uvcopyvr(integer tin,integer tout)
{
  uvcopyvr_c(tin.val,tout.val);
}
/************************************************************************/
fortran subroutine uvvarini(integer tno,integer handle)
{
  int temp;
  uvvarini_c(tno.val,&temp);
  *(handle.addr) = temp;
}
/************************************************************************/
fortran subroutine uvvarset(integer handle,character name)
{
  uvvarset_c(handle.val,name.zterm);
}
/************************************************************************/
fortran subroutine uvvarcpy(integer handle,integer tout)
{
  uvvarcpy_c(handle.val,tout.val);
}
/************************************************************************/
fortran logical function uvvarupd(integer handle)
{
  return(uvvarupd_c(handle.val) ? FORT_TRUE : FORT_FALSE );
}
/************************************************************************/
fortran subroutine uvflush(integer tno)
{
  uvflush_c(tno.val);
}
/************************************************************************/
fortran subroutine uvclose(integer tno)
{
  uvclose_c(tno.val);
}
/************************************************************************/
fortran logical function uvupdate(integer tno)
{
  return(uvupdate_c(tno.val) ? FORT_TRUE : FORT_FALSE );
}
/************************************************************************/
fortran subroutine uvnext(integer tno)
{
  uvnext_c(tno.val);
}
/************************************************************************/
fortran integer function uvscan(integer tno,character var)
{
  return(uvscan_c(tno.val,var.zterm));
}
/************************************************************************/
fortran subroutine uvrewind(integer tno)
{
  uvrewind_c(tno.val);
}
/************************************************************************/
fortran subroutine uvread(integer tno,double preamble,
	complex data,logical flags,integer n,integer nread)
{
  int temp;
#if FORTRAN_CVT_LOG
  int *tbuffer;
  tbuffer = iface_larr(n.val);
  uvread_c(tno.val,preamble.addr,data.addr,tbuffer,n.val,&temp);
  iface_c2f_lcvt(tbuffer,flags.addr,temp);
#else
  uvread_c(tno.val,preamble.addr,data.addr,flags.addr,n.val,&temp);
#endif
  *(nread.addr) = temp;
}
/************************************************************************/
fortran subroutine uvwread(integer tno,
	complex data,logical flags,integer n,integer nread)
{
  int temp;
#if FORTRAN_CVT_LOG
  int *tbuffer;
  tbuffer = iface_larr(n.val);
  uvwread_c(tno.val,data.addr,tbuffer,n.val,&temp);
  iface_c2f_lcvt(tbuffer,flags.addr,temp);
#else  
  uvwread_c(tno.val,data.addr,flags.addr,n.val,&temp);
#endif
  *(nread.addr) = temp;
}
/************************************************************************/
fortran subroutine uvflgwr(integer tno,logical flags)
{
#if FORTRAN_CVT_LOG
  int *tbuffer,n;
  n = uvdim_c(tno.val);
  tbuffer = iface_larr(n);
  iface_f2c_lcvt(flags.addr,tbuffer,n);
  uvflgwr_c(tno.val,tbuffer);
#else
  uvflgwr_c(tno.val,flags.addr);
#endif
}
/************************************************************************/
fortran subroutine uvwflgwr(integer tno,logical flags)
{
#if FORTRAN_CVT_LOG
  int *tbuffer,n;
  n = uvdim_c(tno.val);
  tbuffer = iface_larr(n);
  iface_f2c_lcvt(flags.addr,tbuffer,n);
  uvwflgwr_c(tno.val,tbuffer);
#else
  uvwflgwr_c(tno.val,flags.addr);
#endif
}
/************************************************************************/
fortran subroutine uvset(integer tno,character object,character type,
	integer n,real p1,real p2,real p3)
{
  uvset_c(tno.val,object.zterm,type.zterm,n.val,
		(double)p1.val,(double)p2.val,(double)p3.val);
}
/************************************************************************/
fortran subroutine uvselect(integer tno,character object,
	double p1,double p2,logical datasel)
{
  int flag;
  flag = FORT_LOGICAL(datasel.val);
  uvselect_c(tno.val,object.zterm,p1.val,p2.val,flag);
}
/************************************************************************/
fortran subroutine uvsela(integer tno,character object,character string,
	logical datasel)
{
  int flag;
  flag = FORT_LOGICAL(datasel.val);
  uvsela_c(tno.val,object.zterm,string.zterm,flag);
}
/************************************************************************/
fortran subroutine uvinfo(integer tno,character object,double data)
{
  uvinfo_c(tno.val,object.zterm,data.addr);
}
/************************************************************************/
fortran subroutine uvwrite(integer tno,double preamble,
		complex data,logical flags,integer n)
{
#if FORTRAN_CVT_LOG
  int *tbuffer;
  tbuffer = iface_larr(n.val);
  iface_f2c_lcvt(flags.addr,tbuffer,n.val);
  uvwrite_c(tno.val,preamble.addr,data.addr,tbuffer,n.val);
#else
  uvwrite_c(tno.val,preamble.addr,data.addr,flags.addr,n.val);
#endif
}
/************************************************************************/
fortran subroutine uvwwrite(integer tno,complex data,logical flags,integer n)
{
#if FORTRAN_CVT_LOG
  int *tbuffer;
  tbuffer = iface_larr(n.val);
  iface_f2c_lcvt(flags.addr,tbuffer,n.val);
  uvwwrite_c(tno.val,data.addr,tbuffer,n.val);
#else
  uvwwrite_c(tno.val,data.addr,flags.addr,n.val);
#endif
}
/************************************************************************/
fortran subroutine uvprobvr(integer tno,character var,character type,
	integer length,logical updated)
{
  int temp,tupdated;
  uvprobvr_c(tno.val,var.zterm,type.addr,&temp,&tupdated);
  *(length.addr) = temp;
  *(updated.addr) = (tupdated ? FORT_TRUE : FORT_FALSE);
}
/************************************************************************/
fortran subroutine uvrdvra(integer tno,character var,
	character data,character def)
{
  uvrdvr_c(tno.val,H_BYTE,var.zterm,data.addr,def.zterm,data.len);
  data.pad;
}  
/************************************************************************/
fortran subroutine uvrdvri(integer tno,character var,integer data,integer def)
{
  int mydata,mydef;
  mydef = def.val;
  uvrdvr_c(tno.val,H_INT,var.zterm,(char *)&mydata,(char *)&mydef,1);
  *(data.addr) = mydata;
}
/************************************************************************/
fortran subroutine uvrdvrr(integer tno,character var,real data,real def)
{
  uvrdvr_c(tno.val,H_REAL,var.zterm,(char *)data.addr,(char *)def.addr,1);
}
/************************************************************************/
fortran subroutine uvrdvrd(integer tno,character var,double data,double def)
{
  uvrdvr_c(tno.val,H_DBLE,var.zterm,(char *)data.addr,(char *)def.addr,1);
}
/************************************************************************/
fortran subroutine uvrdvrc(integer tno,character var,complex data,complex def)
{
  uvrdvr_c(tno.val,H_CMPLX,var.zterm,(char *)data.addr,(char *)def.addr,1);
}
/************************************************************************/
fortran subroutine uvgetvra(integer tno,character var,character data)
{
  uvgetvr_c(tno.val,H_BYTE,var.zterm,data.addr,data.len);
  data.pad;
}  
/************************************************************************/
fortran subroutine uvgetvri(integer tno,character var,integer data,integer n)
{
#if FORTRAN_CVT_INT
  int *tbuffer;
  tbuffer = iface_iarr(n.val);
  uvgetvr_c(tno.val,H_INT,var.zterm,(char *)tbuffer,n.val);
  iface_c2f_icvt(tbuffer,data.addr,n.val);
#else
  uvgetvr_c(tno.val,H_INT,var.zterm,(char *)data.addr,n.val);
#endif
}
/************************************************************************/
fortran subroutine uvgetvrj(integer tno,character var,integer data,integer n)
{
#if FORTRAN_CVT_INT
  int *tbuffer;
  tbuffer = iface_iarr(n.val);
  uvgetvr_c(tno.val,H_INT2,var.zterm,(char *)tbuffer,n.val);
  iface_c2f_icvt(tbuffer,data.addr,n.val);
#else
  uvgetvr_c(tno.val,H_INT2,var.zterm,(char *)data.addr,n.val);
#endif
}
/************************************************************************/
fortran subroutine uvgetvrr(integer tno,character var,real data,integer n)
{
  uvgetvr_c(tno.val,H_REAL,var.zterm,(char *)data.addr,n.val);
}
/************************************************************************/
fortran subroutine uvgetvrd(integer tno,character var,double data,integer n)
{
  uvgetvr_c(tno.val,H_DBLE,var.zterm,(char *)data.addr,n.val);
}
/************************************************************************/
fortran subroutine uvgetvrc(integer tno,character var,complex data,integer n)
{
  uvgetvr_c(tno.val,H_CMPLX,var.zterm,(char *)data.addr,n.val);
}
/************************************************************************/
fortran subroutine uvputvri(integer tno,character var,integer data,integer n)
{
  int *tbuffer;
#if FORTRAN_CVT_INT
  tbuffer = iface_iarr(n.val);
  iface_f2c_icvt(data.addr,tbuffer,n.val);
#else
  tbuffer = data.addr;
#endif
  uvputvr_c(tno.val,H_INT,var.zterm,(char *)tbuffer,n.val);
}
/************************************************************************/
fortran subroutine uvputvrr(integer tno,character var,real data,integer n)
{
  uvputvr_c(tno.val,H_REAL,var.zterm,(char *)data.addr,n.val);
}
/************************************************************************/
fortran subroutine uvputvrd(integer tno,character var,double data,integer n)
{
  uvputvr_c(tno.val,H_DBLE,var.zterm,(char *)data.addr,n.val);
}
/************************************************************************/
fortran subroutine uvputvrc(integer tno,character var,complex data,integer n)
{
  uvputvr_c(tno.val,H_CMPLX,var.zterm,(char *)data.addr,n.val);
}
/************************************************************************/
fortran subroutine uvputvra(integer tno,character var,character data)
{
  char *s;
  s = data.zterm;
  uvputvr_c(tno.val,H_BYTE,var.zterm,s,strlen(s));
}
/************************************************************************/
fortran subroutine hopen(integer tno,character name,character status,
	integer iostat)
{
  int temp1,temp2;
  hopen_c(&temp1,name.zterm,status.zterm,&temp2);
  *(tno.addr) = temp1;
  *(iostat.addr) = temp2;
}
/************************************************************************/
fortran subroutine hclose(integer tno)
{
  hclose_c(tno.val);
}
/************************************************************************/
fortran subroutine hflush(integer tno,integer iostat)
{
  int temp;
  hflush_c(tno.val,&temp);
  *(iostat.addr) = temp;
}
/************************************************************************/
fortran subroutine habort()
{
  habort_c();
}
/************************************************************************/
fortran subroutine hrm(integer tno)
{
  hrm_c(tno.val);
}
/************************************************************************/
fortran subroutine hdelete(integer tno,character name,integer iostat)
{
  int temp;
  hdelete_c(tno.val,name.zterm,&temp);
  *(iostat.addr) = temp;
}
/************************************************************************/
fortran subroutine haccess(integer tno,integer item,
	character name,character status,integer iostat)
{
  int temp1,temp2;
  haccess_c(tno.val,&temp1,name.zterm,status.zterm,&temp2);
  *(item.addr) = temp1;
  *(iostat.addr) = temp2;
}
/************************************************************************/
fortran subroutine hmode(integer tno,character mode)
{
  hmode_c(tno.val,mode.addr);
  mode.pad;
}
/************************************************************************/
fortran logical function hexists(integer tno,character item)
{
  return( hexists_c(tno.val,item.zterm) ? FORT_TRUE : FORT_FALSE);
}
/************************************************************************/
fortran subroutine hdaccess(integer item,integer iostat)
{
  int temp;
  hdaccess_c(item.val,&temp);
  *(iostat.addr) = temp;
}
/************************************************************************/
fortran integer function hsize(integer item)
{
  off_t size;
  size = hsize_c(item.val);
#if FORTRAN_CVT_INT
#else
  if((off_t)(INT_MAX) < size)size = (off_t)INT_MAX;
#endif
  return((fort_integer)size);
}
/************************************************************************/
fortran integer function htell(integer item)
{
  return(htell_c(item.val));
}
/************************************************************************/
fortran subroutine hseek(integer item,integer offset)
{
  hseek_c(item.val,offset.val);
}
/************************************************************************/
fortran subroutine hreada(integer item,character line,integer iostat)
{
  int temp;
  hreada_c(item.val,line.addr,line.len,&temp);
  *(iostat.addr) = temp;
  if(!temp)line.pad;
}
/************************************************************************/
fortran subroutine hwritea(integer item,character line,integer iostat)
{
  char *s;
  int temp;
  s = line.zterm;
  hwritea_c(item.val,s,strlen(s)+1,&temp);
  *(iostat.addr) = temp;
}
/************************************************************************/
fortran subroutine hreadb(integer item,character buffer,
	integer offset,integer length,integer iostat)
{
  int temp;
  hreadb_c(item.val,buffer.addr,offset.val,length.val,&temp);
  *(iostat.addr) = temp;
}
/************************************************************************/
fortran subroutine hwriteb(integer item,character buffer,
	integer offset,integer length,integer iostat)
{
  int temp;
  hwriteb_c(item.val,buffer.addr,offset.val,length.val,&temp);
  *(iostat.addr) = temp;
}
/************************************************************************/
fortran subroutine hreadj(integer item,integer buffer,
	integer offset,integer length,integer iostat)
{
#if FORTRAN_CVT_INT
  int temp,*tbuffer;
  tbuffer = iface_iarr(length.val);
  hreadj_c(item.val,tbuffer,offset.val,length.val,&temp);
  iface_c2f_icvt(tbuffer,buffer.addr,length.val);
  *(iostat.addr) = temp;
#else
  hreadj_c(item.val,buffer.addr,offset.val,length.val,iostat.addr);
#endif
}
/************************************************************************/
fortran subroutine hwritej(integer item,integer buffer,
	integer offset,integer length,integer iostat)
{
  int temp,*tbuffer;
#if FORTRAN_CVT_INT
  tbuffer = iface_iarr(length.val);
  iface_f2c_icvt(buffer.addr,tbuffer,length.val);
#else
  tbuffer = buffer.addr;
#endif
  hwritej_c(item.val,tbuffer,offset.val,length.val,&temp);
  *(iostat.addr) = temp;
}
/************************************************************************/
fortran subroutine hreadi(integer item,integer buffer,
	integer offset,integer length,integer iostat)
{
#if FORTRAN_CVT_INT
  int temp,*tbuffer;
  tbuffer = iface_iarr(length.val);
  hreadi_c(item.val,tbuffer,offset.val,length.val,&temp);
  iface_c2f_icvt(tbuffer,buffer.addr,length.val);
  *(iostat.addr) = temp;
#else
  hreadi_c(item.val,buffer.addr,offset.val,length.val,iostat.addr);
#endif
}
/************************************************************************/
fortran subroutine hwritei(integer item,integer buffer,
	integer offset,integer length,integer iostat)
{
  int temp,*tbuffer;
#if FORTRAN_CVT_INT
  tbuffer = iface_iarr(length.val);
  iface_f2c_icvt(buffer.addr,tbuffer,length.val);
#else
  tbuffer = buffer.addr;
#endif
  hwritei_c(item.val,tbuffer,offset.val,length.val,&temp);
  *(iostat.addr) = temp;
}
/************************************************************************/
fortran subroutine hreadr(integer item,real buffer,
	integer offset,integer length,integer iostat)
{
  int temp;
  hreadr_c(item.val,buffer.addr,offset.val,length.val,&temp);
  *(iostat.addr) = temp;
}
/************************************************************************/
fortran subroutine hwriter(integer item,real buffer,
	integer offset,integer length,integer iostat)
{
  int temp;
  hwriter_c(item.val,buffer.addr,offset.val,length.val,&temp);
  *(iostat.addr) = temp;
}
/************************************************************************/
fortran subroutine hreadd(integer item,double buffer,
	integer offset,integer length,integer iostat)
{
  int temp;
  hreadd_c(item.val,buffer.addr,offset.val,length.val,&temp);
  *(iostat.addr) = temp;
}
/************************************************************************/
fortran subroutine hwrited(integer item,double buffer,
	integer offset,integer length,integer iostat)
{
  int temp;
  hwrited_c(item.val,buffer.addr,offset.val,length.val,&temp);
  *(iostat.addr) = temp;
}
/************************************************************************/
fortran subroutine hisopen(integer tno,character status)
{
  hisopen_c(tno.val,status.zterm);
}
/************************************************************************/
fortran subroutine hisread(integer tno,character line,logical eof)
{
  int temp;
  hisread_c(tno.val,line.addr,line.len,&temp);
  if(temp)line.pad;
  *(eof.addr) = (temp ? FORT_TRUE : FORT_FALSE);
}
/************************************************************************/
fortran subroutine hiswrite(integer tno,character line)
{
  hiswrite_c(tno.val,line.zterm);
}
/************************************************************************/
fortran subroutine hisclose(integer tno)
{
  hisclose_c(tno.val);
}
/************************************************************************/
fortran subroutine xyopen(integer tno,character name,character status,
	integer naxis,integer axes)
{
  int debuf,temp,*taxes;
  debuf = 0;
#if FORTRAN_CVT_INT
  taxes = iface_iarr(naxis.val);
  if(!strcmp(status.zterm,"new")){
    iface_f2c_icvt(axes.addr,taxes,naxis.val);
  }else{
    debuf = 1;
  }
#else
  taxes = axes.addr;
#endif
  xyopen_c(&temp,name.zterm,status.zterm,naxis.val,taxes);
  if(debuf)iface_c2f_icvt(taxes,axes.addr,naxis.val);
  *(tno.addr) = temp;
}
/************************************************************************/
fortran subroutine xyflush(integer tno)
{
  xyflush_c(tno.val);
}
/************************************************************************/
fortran subroutine xyclose(integer tno)
{
  xyclose_c(tno.val);
}
/************************************************************************/
fortran subroutine xyread(integer tno,integer index,real buffer)
{
  xyread_c(tno.val,index.val,buffer.addr);
}
/************************************************************************/
fortran subroutine xywrite(integer tno,integer index,real buffer)
{
  xywrite_c(tno.val,index.val,buffer.addr);
}
/************************************************************************/
fortran subroutine xymkrd(integer tno,integer index,
	integer buffer,integer n,integer nread)
{
  int temp;
#if FORTRAN_CVT_INT
  int *tbuffer;
  tbuffer = iface_iarr(n.val);
  xymkrd_c(tno.val,index.val,tbuffer,n.val,&temp);
  iface_c2f_icvt(tbuffer,buffer.addr,temp);
#else
  xymkrd_c(tno.val,index.val,buffer.addr,n.val,&temp);
#endif
  *(nread.addr) = temp;
}
/************************************************************************/
fortran subroutine xymkwr(integer tno,integer index,integer buffer,integer n)
{
  int *tbuffer;
#if FORTRAN_CVT_INT
  tbuffer = iface_iarr(n.val);
  iface_f2c_icvt(buffer.addr,tbuffer,n.val);
#else
  tbuffer = buffer.addr;
#endif
  xymkwr_c(tno.val,index.val,tbuffer,n.val);
}
/************************************************************************/
fortran subroutine xyflgrd(integer tno,integer index,logical buffer)
{
#if FORTRAN_CVT_LOG
  int *tbuffer,n;
  n = xydim_c(tno.val);
  tbuffer = iface_larr(n);
  xyflgrd_c(tno.val,index.val,tbuffer);
  iface_c2f_lcvt(tbuffer,buffer.addr,n);
#else
  xyflgrd_c(tno.val,index.val,buffer.addr);
#endif
}
/************************************************************************/
fortran subroutine xyflgwr(integer tno,integer index,logical buffer)
{
#if FORTRAN_CVT_LOG
  int *tbuffer,n;
  n = xydim_c(tno.val);
  tbuffer = iface_larr(n);
  iface_f2c_lcvt(buffer.addr,tbuffer,n);
  xyflgwr_c(tno.val,index.val,tbuffer);
#else
  xyflgwr_c(tno.val,index.val,buffer.addr);
#endif
}
/************************************************************************/
fortran subroutine xysetpl(integer tno,integer naxis,integer axes)
{
  int *taxes;
#if FORTRAN_CVT_INT
  taxes = iface_iarr(naxis.val);
  iface_f2c_icvt(axes.addr,taxes,naxis.val);
#else
  taxes = axes.addr;
#endif
  xysetpl_c(tno.val,naxis.val,taxes);
}
/************************************************************************/
fortran subroutine hdprobe(integer tno,character keyword,
	character descr,character type,integer n)
{
  int temp;
  hdprobe_c(tno.val,keyword.zterm,descr.addr,descr.len,type.addr,&temp);
  descr.pad;
  type.pad;
  *(n.addr) = temp;
}
/************************************************************************/
fortran subroutine rdhdr(integer tno,character keyword,
	real value,real defval)
{
  double dvalue,ddefval;

  ddefval = defval.val;
  rdhdd_c(tno.val,keyword.zterm,&dvalue,ddefval);
  *(value.addr) = dvalue;
}
/************************************************************************/
fortran subroutine rdhdi(integer tno,character keyword,
	integer value,integer defval)
{
  double dvalue,ddefval;

  ddefval = defval.val;
  rdhdd_c(tno.val,keyword.zterm,&dvalue,ddefval);
  *(value.addr) = dvalue;
}
/************************************************************************/
fortran subroutine rdhdd(integer tno,character keyword,
	double value,double defval)
{
  rdhdd_c(tno.val,keyword.zterm,value.addr,defval.val);
}
/************************************************************************/
fortran subroutine rdhda(integer tno,character keyword,
	character value,character defval)
{
  rdhda_c(tno.val,keyword.zterm,value.addr,defval.zterm,value.len);
  value.pad;
}
/************************************************************************/
fortran subroutine rdhdc(integer tno,character keyword,
	complex value,complex defval)
{
  rdhdc_c(tno.val,keyword.zterm,value.addr,defval.addr);
}
/************************************************************************/
fortran subroutine wrhdr(integer tno,character keyword,real value)
{
  wrhdr_c(tno.val,keyword.zterm,(double)value.val);
}
/************************************************************************/
fortran subroutine wrhdd(integer tno,character keyword,double value)
{
  wrhdd_c(tno.val,keyword.zterm,value.val);
}
/************************************************************************/
fortran subroutine wrhdi(integer tno,character keyword,integer value)
{
  wrhdi_c(tno.val,keyword.zterm,value.val);
}
/************************************************************************/
fortran subroutine wrhdc(integer tno,character keyword,complex value)
{
  wrhdc_c(tno.val,keyword.zterm,value.addr);
}
/************************************************************************/
fortran subroutine wrhda(integer tno,character keyword,character value)
{
  wrhda_c(tno.val,keyword.zterm,value.zterm);
}
/************************************************************************/
fortran subroutine hdcopy(integer tIn,integer tOut,character keyword)
{
  hdcopy_c(tIn.val,tOut.val,keyword.zterm);
}
/************************************************************************/
fortran logical function hdprsnt(integer tno,character keyword)
{
  return(hdprsnt_c(tno.val,keyword.zterm) ? FORT_TRUE : FORT_FALSE);
}
