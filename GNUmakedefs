#=============================================================================
# GNUmakedefs
#-----------------------------------------------------------------------------
# This generic GNU makefile is included by all other Miriad makefiles so that
# commonly used variables and rules can be defined in one place.  However,
#
#                      DO NOT MODIFY THIS FILE
#
# since changes will be lost if a newer version is installed.  Overriding
# definitions should instead be made in the site-specific makedefs file,
#
#   $(MIRARCHD)/GNUmakedefs,
#
# which is included by this file.  Typically you should only need to modify
# compiler names and options and the variables relating to external libraries.
#
# Note that this makefile also includes
#
#   $(MIRROOT)/scripts/$(MIRARCH)/GNUmakedefs
#
# to fine-tune some variables with architecture-specific values.  To list all
# variable definitions, type 'gmake show' in any Miriad directory that
# contains a GNUmakefile ('gmake' here refers to GNU make, it may be installed
# simply as 'make' on linux and other systems).  You can also get a summary of
# target names by running 'gmake help'
#
# Original: 2006/08/19, Mark Calabretta, ATNF
# $Id$
#-----------------------------------------------------------------------------
# We rely only on the MIR environment variable.
MIRROOT  := $(MIR)

# MIRARCH will evaluate to something like linux, or sun4sol.
MIRARCH  := $(shell $(MIRROOT)/scripts/mirarch)
MIRARCHD := $(MIRROOT)/$(MIRARCH)
MIRBIND  := $(MIRARCHD)/bin
MIRLIBD  := $(MIRARCHD)/lib

# If we're within $(MIRROOT)/... it's a system compile, else programmer.
MIRDIR   := $(shell cd $(MIR) && /bin/pwd)
THISDIR  := $(shell /bin/pwd)
ifeq "$(findstring $(MIRDIR),$(THISDIR))" ""
  MAKEMODE := programmer
else
  MAKEMODE := system
endif

# Name of the top-level Miriad directory and this subdirectory.
miriad   := $(notdir $(MIRROOT))
CODESUBD := $(shell echo $(THISDIR)/ | sed -e '{s=^.*/$(miriad)/==;s=/*$$==;}')

#=============================================================================
#                        START OF DEFAULT DEFINITIONS
#                      REMEMBER, DO NOT MODIFY THIS FILE
#=============================================================================
# Compiler options.
#
# The *OPT and *DBG variables are for system (optimized) and code development
# (debug) compilation.  They should be defined in terms of the corresponding
# *STD variables containing flags common to both.
#
# Some of these variables are overridden by the platform-specific GNUmakedefs
# files in $MIR/scripts/*/GNUmakedefs.  For testing it may also be convenient
# to override them on the GNU 'make' command line, e.g. gmake FCDBG=-O2.

# Source code checkout; only needed if you have the Miriad RCS repository.
CO       := co
COFLAGS  := -f

# Soft symbolic link.
LN_S     := ln -s

# Miriad's Fortran preprocessor and options.  Add the -b option to RATFLAGS
# to cause backslashes inside quoted text strings to be doubled; this
# satisfies some unix Fortran compilers (e.g. g77 and Sun's f77) that treat
# the backslash as an escape character by default.  Note that RATFLAGS is
# redefined in $(MIRROOT)/scripts/$(MIRARCH)/GNUmakedefs.
RATTY    := $(MIRBIND)/ratty
RATFLAGS := -s $(MIRARCH)

# Fortran compiler and debug/optimize flags.
FC       := f77
FCSTD    :=
FCOPT     = -O $(FCSTD)
FCDBG     = -g $(FCSTD)

# Miriad's Fortran-C preprocessor, you shouldn't need to change this.
INTF2C   := $(MIRBIND)/intf2c
F2CFLAGS := -s $(MIRARCH)

# C preprocessor debug/optimize flags.
CPPSTD   := -D$(MIRARCH)
CPPOPT    = $(CPPSTD)
CPPDBG    = $(CPPSTD)

# C compiler and debug/optimize flags.
CC       := cc
CSTD     :=
COPT      = -O $(CSTD)
CDBG      = -g $(CSTD)

# Object library utilities.  Most versions of 'ar' now generate an index
# automatically after each invokation and it is not necessary to invoke
# ranlib separately.  It is defeated here by setting RANLIB to ":".
AR       := ar
ARFLAGS  := rv
RANLIB   := :

# Linker debug/optimize flags (FC is used to do the linking).
LDSTD    :=
LDOPT     = $(LDSTD)
LDDBG     = $(LDSTD)

# Command used to strip symbols from an executable to reduce its size.  Set
# to ":" to defeat it.
STRIP    := strip

# How to regenerate the man page index database, the name of the manpage
# directory will be added, e.g. in Solaris it would be 'catman -w -M'.
MANDB    := mandb

# It should not be necessary to compile the Miriad User or Programmer Guides
# as these are supplied with the Miriad distribution in a separate tar file.
# However, if you do want to, set GUIDES as follows in your local GNUmakedefs
#
#  GUIDES := prog user
#
# and ensure that the following definitions are correct:
LATEX     := latex
MAKEINDEX := makeindex
DVIPS     := dvips
FIG2DEV   := fig2dev
GNUPLOT   := gnuplot
GZIP      := gzip

# For putting timestamps in the build log.
HOST      := $(shell uname -n | sed -e 's/\..*//')
TIMER     := date +"%a %Y/%m/%d %X %z, executing on $(HOST)"

#-----------------------------------------------------------------------------
# The search path for operating system specific routines is defined as
#
#   $(MIRSUBD)/unix/$(SUBS$(MIRARCH)):$(MIRSUBD)/unix:$(MIRSUBD)
#
# For example, if MIRARCH is linux64, using SUBSlinux64 below the path would
# be
#
#   $MIR/subs/unix/alpha_linux:$MIR/subs/unix:$MIR/subs
#
# Note that $MIR/subs/unix/alpha_linux/pack.c defines conversion routines
# applicable to little-endian IEEE floating point machines which explains why
# it is used for DEC alphas and a variety of Intel-based platforms apart from
# linux.

SUBSalpha         := alpha_linux
SUBSconvex        := convex
SUBScygwin        := alpha_linux
SUBSdarwin_ppc    :=
SUBSdarwin_x86    := alpha_linux
SUBSdarwin_x86_64 := alpha_linux
SUBShpux          := hpux
SUBSi86sol        := alpha_linux
SUBSirix          :=
SUBSirix64        := irix64
SUBSlinux         := alpha_linux
SUBSlinux-ia64    := alpha_linux
SUBSlinux64       := alpha_linux
SUBSsun4          :=
SUBSsun4sol       :=
SUBSunicos        := unicos

#-----------------------------------------------------------------------------
# Linker options for external libraries.

# LINPACK, a linear algebra package used by 17 numerically intensive programs.
# Leave as is to use the version supplied with Miriad.
LINPACKLIB := -L$(MIRLIBD) -llinpack

# PGPLOT (FORTRAN plotting package required by tasks such as uvplt that
# produce graphics).  It is supplied with Miriad in the binary distribution
# kit available for some platforms.  There is no telling what other libraries
# it may require since that depends on what graphics drivers were compiled
# into it.  X11 will almost certainly be needed but it is defined separately
# below.  Typically -lpng will also be needed and in turn this may require -lz
# (the zlib compression library).  You may also need to add -L options to tell
# the linker where to find them.  The installed names of the PGPLOT and png
# libraries may differ from the defaults defined here (e.g. for Darwin).
PGPLOT     := pgplot
PNG        := png
PGPLOTLIB   = -l$(PGPLOT) -l$(PNG) -lz

# RPFITS, required by a handful of tasks, primarily atlod, that read ATNF data
# using subroutine RPFITSIN.  It is supplied with Miriad in the binary
# distribution kit available for some platforms.  The full pathname must be
# specified because this library is listed as an explicit prerequisite of some
# tasks (i.e. they will be recompiled if it changes).
RPFITSLIB  := $(MIRLIBD)/librpfits.a

# WCSLIB, required by the many tasks (>90) that deal with image coordinates.
# It is supplied with Miriad in the binary distribution kit available for some
# platforms.  The full pathname must be specified because this library is
# listed as an explicit prerequisite of all tasks (i.e. they will be
# recompiled if it changes).
WCSLIB     := $(MIRLIBD)/libwcs.a

# X11, just the basic X11 library, needed to satisfy PGPLOT dependencies.
# Also used to build sxmtv if xmtv fails to compile.
X11LIB     := -L/usr/X11R6/lib -lX11

# X11 with widget libraries for building X clients (xmtv and xpanel).
X11INCD    := /usr/X11R6/include
X11LIBS    := -L/usr/X11R6/lib -lXaw -lXmu -lXext -lXt -lX11

# Any other libraries that may be required, e.g. -lsocket -lnsl is required in
# Solaris for the tv tasks.  -lm is the standard maths library.
XTRALIBS   := -lm

# READLINE, used only by the Miriad shell.  The static library (without header
# files) is supplied with Miriad in the binary distribution kit available for
# some platforms.  If GNU readline is not available then clear this and the
# Miriad shell will be compiled without command line editing capability.
# Readline needs either the termcap or ncurses library.  You may also need to
# add -I and/or -L options.
READLINELIB := -lreadline -ltermcap

#-----------------------------------------------------------------------------
# Object module dependency analysis.
#
# Define a command to list the global symbols defined by an object module.
# This is used to identify the object modules in the Miriad library that
# define symbols needed by an executable.  It is mainly intended for Miriad
# systems where the library is under development, to save having to recompile
# every Miriad task if just one object module changes.  Appropriate commands
# are pre-defined for linux, linux64, darwin_x86, darwin_x86_64, darwin_ppc,
# and sun4sol.
#
# If you don't know how to set this for your platform (or don't want this
# dependency analysis) then simply leave nm-syms undefined (or undefine it in
# your GNUmakedefs), each executable will then depend on the library as a
# whole.  The name of the object module is $$OBJ.

nm-syms.linux         := nm -g $$OBJ | awk '/ T [a-z]/ {print $$3}'
nm-syms.linux64       := $(nm-syms.linux)
nm-syms.darwin_x86    := nm -g $$OBJ | awk '/ T _[a-z]/ {print $$3}'
nm-syms.darwin_x86_64 := $(nm-syms.darwin_x86)
nm-syms.darwin_ppc    := $(nm-syms.darwin_x86)
nm-syms.sun4sol       := nm -g -p $$OBJ | awk '/ T / {print $$3}'

#=============================================================================
#                         END OF DEFAULT DEFINITIONS
#                      REMEMBER, DO NOT MODIFY THIS FILE
#
# You shouldn't need to read past here - I hope that makes you feel better!
#=============================================================================

# Get platform-specific redefinitions of the defaults defined above.
-include $(MIRROOT)/scripts/$(MIRARCH)/GNUmakedefs

# Get installation-specific redefinitions of the defaults defined above.
-include $(MIRARCHD)/GNUmakedefs

ifeq "$(MAKEMODE)" "programmer"
  # Programmer-specific definitions.
  PGMRROOT := $(shell echo $(THISDIR) | sed -e 's=^\(.*/$(miriad)\).*=\1=')
  -include $(PGMRROOT)/$(MIRARCH)/GNUmakedefs
endif

#-----------------------------------------------------------------------------
# Ensure that we have a consistent collating sequence and character handling.
export LC_COLLATE := POSIX
export LC_TYPE    := POSIX

# Internally set gmake options; unfortunately setting -r (--no-builtin-rules)
# or -R (--no-builtin-variables, which implies -r) internally is ineffective
# because built-in rules and variables would already have been loaded by now.
# Those options are useful for reducing irrelevant diagnostic output from the
# -d (--debug=[abvijm]) option and must be set on the command line.  (These
# makefiles do not rely on any built-in rules or variables, in fact some
# interfere with the rules defined here and must be defeated explicitly.)
MAKEFLAGS := -i --no-print-directory $(MAKEFLAGS)

# Basic variables.
override SHELL    := /bin/sh
override PID      := $(shell echo $$$$)
override JOBIDENT := $(USER)@$(HOST):$(PID)
override comma    := ,
override null     :=
override space    := $(null) $(null)
override backsl   := $(null)\$(null)
override tab      := $(null)	$(null)

# Variable $; consists of a single newline.
override define ;


endef

# Setting this to "@" quietens some system targets.
Q := @

# Indentation levels.
I1 := $(tab)
I2 := $(I1)$(null)    $(null)
I3 := $(I1)$(tab)
I4 := $(I3)$(null)    $(null)
I5 := $(I3)$(tab)
I6 := $(I5)$(null)    $(null)
I7 := $(I5)$(tab)
I8 := $(I7)$(null)    $(null)
MAKEINDENT := $(I$(MAKELEVEL))

# Miriad code directories.  Most of the special docs are hand-written though
# some (cheat,tasks) are generated.
MIRSCRPD := $(MIRROOT)/scripts
MIRTOOLD := $(MIRROOT)/tools
MIRINCD  := $(MIRROOT)/inc
MIRINCOD := $(wildcard $(MIRINCD)/$(MIRARCH))
MIRSUBSD := $(MIRROOT)/subs
MIRPROGD := $(MIRROOT)/prog
MIRSPECD := $(MIRROOT)/spec
MIRGUIDD := $(MIRROOT)/guides
MIRSDOCD := $(MIRROOT)/specdoc

# This determines whether the RCS source repositories are present.
MIRRCS   := $(wildcard $(MIRROOT)/RCS)

# Miriad code directories.
CODEDIR  := $(patsubst %/,%,$(MIRROOT)/$(CODESUBD))

ifdef MIRRCS
  RCSDIR := $(MIRRCS)/$(CODESUBD)
  CHKDIR := $(CODEDIR)
else
  RCSDIR :=
  CHKDIR :=
endif

# Subdirectories that contain a makefile (for recursion).
ifdef MIRRCS
  SUBDIRS := $(wildcard $(RCSDIR)/*/GNUmakefile,v)
  SUBDIRS := $(notdir $(patsubst %/GNUmakefile$(comma)v,%,$(SUBDIRS)))
else
  SUBDIRS := $(wildcard $(CODEDIR)/*/GNUmakefile)
  SUBDIRS := $(notdir $(patsubst %/GNUmakefile,%,$(SUBDIRS)))
endif

CODESUBS := $(addprefix $(CODEDIR)/,$(SUBDIRS))

# Remaining Miriad system directories.
MIRAUXD  := $(MIRARCHD)/aux
MIRMAND  := $(MIRARCHD)/man
MIRMAN1D := $(MIRMAND)/man1
MIRTMPD  := $(MIRARCHD)/tmp

MIRDOCD  := $(MIRROOT)/doc
MIRHTMLD := $(MIRROOT)/html
MIRHDOCD := $(MIRHTMLD)/doc

SYSDIRS  := $(MIRARCHD) $(MIRAUXD) $(MIRBIND) $(MIRLIBD)  $(MIRMAND)
SYSDIRS  += $(MIRMAN1D) $(MIRTMPD) $(MIRDOCD) $(MIRHTMLD) $(MIRHDOCD)

# For Miriad code distribution from ATNF (currently only accessible from
# Solaris hosts).
MIRFTPD  := /nfs/ftp/software/miriad


# Programmer directories.
ifeq "$(MAKEMODE)" "programmer"
  # The name of the root of the programmer workspace MUST accord with $MIR.
  PGMRROOT := $(shell echo $(THISDIR) | sed -e 's=^\(.*/$(miriad)\).*=\1=')
  PGMRINCD := $(PGMRROOT)/inc
  PGMRINOD := $(wildcard $(PGMRINCD)/$(MIRARCH))
  PGMRAUXD := $(PGMRROOT)/$(MIRARCH)/aux
  PGMRLIBD := $(PGMRROOT)/$(MIRARCH)/lib
  PGMRBIND := $(PGMRROOT)/$(MIRARCH)/bin

  ifeq "$(wildcard $(PGMRAUXD))" ""
    $(shell mkdir -p $(PGMRAUXD))
    $(shell chmod u+rwx $(PGMRAUXD))
  endif

  ifeq "$(wildcard $(PGMRLIBD))" ""
    $(shell mkdir -p $(PGMRLIBD))
    $(shell chmod u+rwx $(PGMRLIBD))
  endif

  ifeq "$(wildcard $(PGMRBIND))" ""
    $(shell mkdir -p $(PGMRBIND))
    $(shell chmod u+rwx $(PGMRBIND))
  endif
endif


# All files in the Miriad directory.
ifdef MIRRCS
  # Ignore source files that haven't been checked in.
  MIRSRCS  := $(subst $(comma)v,,$(notdir $(wildcard $(RCSDIR)/*,v)))
else
  MIRSRCS  := $(notdir $(wildcard $(CODEDIR)/*))
endif

# Filter out subdirectories.
ALLSUBD  := $(notdir $(patsubst %/.,%,$(wildcard $(CODEDIR)/*/.)))
MIRSRCS  := $(filter-out $(ALLSUBD),$(MIRSRCS))


#-----------------------------------------------------------------------------
# Variables destined for propagation to the environment must be simply
# expanded and must not have non-alphanumeric characters in their names;
# convert them now.
#-----------------------------------------------------------------------------
# Subdirectories (used within rule command sequences).
export SUBDIRS
export CODESUBS


#-----------------------------------------------------------------------------
# Canned rule definitions for dependency analysis apply to system and
# programmer alike with only minor differences determined by the values of
# DPNDLOCK, DPNDINCD, and DPNDINCL defined in the makefiles that use them
# (subs and prog).
#
# $(backsl) is used to insert a literal backslash.
#-----------------------------------------------------------------------------
# Locking mechanism to guard against multiple builds updating the dependency
# lists simultaneously.  The lock file is ignored if it's more than 60s old.
# Otherwise, wait for up to 32s for it to disappear.
define wait-lock
  -@ echo ""
  -@ echo "Updating dependencies for $<"
  -@ if [ -f "$(DPNDLOCK)" ] ; then $(backsl)
       $(MIRBIND)/tract -q60 "$(DPNDLOCK)" && $(backsl)
         $(RM) $(DPNDLOCK) ; $(backsl)
       for i in 9 8 7 6 5 4 3 2 1 ; do $(backsl)
         [ ! -f "$(DPNDLOCK)" ] && break ; $(backsl)
         echo "	waiting for lock file ($$i)..." ; $(backsl)
         sleep 3 ; $(backsl)
       done ; $(backsl)
       if [ -f "$(DPNDLOCK)" ] ; then $(backsl)
         echo "About to forcibly break lock..." ; $(backsl)
         sleep 5 ; $(backsl)
         $(RM) $(DPNDLOCK) ; $(backsl)
       fi ; $(backsl)
     fi
   @ cat /dev/null > $(DPNDLOCK)
  -@ $(RM) $(DPNDINCD)/$*
endef

# Command sequence for updating the full include-file dependency list.  The
# 'sleep 1' is required on very fast machines to ensure that the timestamp is
# at least one second older than the target.
define update-list
  -@ $(RM) $(DPNDINCL)
   @ cat $(DPNDINCD)/* > $(DPNDINCL)
  -@ sleep 1
endef

# Release the lock.
define wait-unlock
  -@ $(RM) $(DPNDLOCK)
endef


#-----------------------------------------------------------------------------
# Pattern rules applicable to all Miriad makefiles.
#-----------------------------------------------------------------------------
ifdef MIRRCS
   # General rule for checkout if the RCS repositories exist.
   $(MIRROOT)/% :: $(MIRRCS)/%,v
	@ $(CO) $(COFLAGS) $< $@ 2>&1 | \
	    sed -n \
	        -e '1N' \
	        -e '2s/.*\//	/' \
	        -e '2s/\nrevision//' \
	        -e '2s/$$//p'

   %,v : ;
endif


# Ideally we would like to kill all built-in pattern rules using the -r or -R
# options but as explained above these cannot be set internally.

# Must be killed to stop automatic checkout into programmer workspaces.
%:: RCS/%,v

# May interfere with dependency analysis in the subs and prog makefiles.
%.o: %.f
%.o: %.c

# The remainder are harmless except for producing nuisance entries in
# 'gmake -d' output.
%:: %,v
%:: RCS/%
%:: s.%
%:: SCCS/s.%

%: %.c		# C source file.
%: %.cc		# C++ source file.
%: %.cpp	# C++ source file.
%: %.C		# C++ source file.
%: %.f		# Fortran source file.
%: %.F		# Fortran source file with C preprocessor directives.
%: %.i		# C preprocessor output.
%: %.mod	# Modula-2 source file.
%: %.o		# Object module.
%: %.p		# Pascal source file.
%: %.r		# Ratfor source file.
%: %.s		# Preprocessed assembler source file.
%: %.sh		# Shell script.
%: %.S		# Assembler source file with C preprocessor directives.

%.f: %.F
%.f: %.r

%.c: %.l	# Lex or flex source file.
%.c: %.w	# Web source file (Tex).
%.c: %.y	# Yacc or bison source file.

%.o: %.cc
%.o: %.cpp
%.o: %.C
%.o: %.F
%.o: %.i
%.o: %.mod
%.o: %.p
%.o: %.r
%.o: %.s
%.o: %.S

(%): %		# Archive library member.

#-----------------------------------------------------------------------------
# General static rules applicable to all Miriad makefiles.
#-----------------------------------------------------------------------------
ifeq "$(MAKEMODE)" "system"
  # System-oriented rules.
  #-----------------------
  .PHONY : allsys chklog chkout cleansys sysdirs help

  # At the minimum the default rule checks out sources if the RCS repositories
  # exist.  Additional dependencies may be defined for allsys in the including
  # makefile.
  allsys :: $(CHKDIR) sysdirs

  # Rules for checking out sources if the RCS repository is available.
  ifdef MIRRCS
    chkout : chklog $(CODEDIR)
	-@ for i in $$SUBDIRS ; do \
	     $(MAKE) -C $$i chkout ; \
	   done

    chklog :
	-@ if [ "$Q" != "@" -o "$(MAKELEVEL)" = 0 ] ; then \
	     echo "" ; \
	     echo gmake[$(MAKELEVEL)]: $(MAKE) -C $(CODESUBD) chkout ; \
	   else \
	     echo chkout[$(MAKELEVEL)]:"$(MAKEINDENT)"$(notdir $(CODESUBD)) ; \
	   fi

    $(CODEDIR) : $(MIRSRCS:%=$(CODEDIR)/%)
  endif

  # Rules for processing subdirectories.
  #-------------------------------------
  ifdef SUBDIRS
    $(CODESUBS) : FORCE
	 @ if [ ! -d $@ ] ; then \
	      mkdir -m 2775 $@ ; \
	      echo "" ; \
	      echo "Created directory $@" ; \
	   fi
        ifdef MIRRCS
	   @ if [ ! -d $@/RCS ] ; then \
	      $(LN_S) $(subst $(CODEDIR),$(RCSDIR),$@) $@/RCS ; \
	      echo "Created symlink   $@/RCS" ; \
	   fi
        endif
	-@ echo ""
	-@ echo gmake[$(MAKELEVEL)]: $(MAKE) -C $(@F) allsys
	-@ $(TIMER)
	-@ $(MAKE) -C $@ allsys

    $(SUBDIRS) : FORCE
	 @ if [ ! -d $@ ] ; then \
	      mkdir -m 2775 $@ ; \
	      echo "" ; \
	      echo "Created directory $@" ; \
	   fi
        ifdef MIRRCS
	   @ if [ ! -d $@/RCS ] ; then \
	      $(LN_S) $(RCSDIR)/$@ $@/RCS ; \
	      echo "Created symlink   $@/RCS" ; \
	   fi
        endif
	-@ echo ""
	-@ echo gmake[$(MAKELEVEL)]: $(MAKE) -C $@
	-@ $(TIMER)
	-@ $(MAKE) -C $@
  endif

  # Rules for creating system directories.
  sysdirs : $(SYSDIRS)

  $(SYSDIRS) ::
	 @ if [ ! -d "$@" ] ; then \
	     mkdir -m 2775 $@ ; \
	     echo "" ; \
	     echo "Created directory $@" ; \
	   fi

  # Rule for cleaning out system directories.
  cleansys ::
	-@ for i in $$SUBDIRS ; do \
           if [ "$Q" != "@" -o "$(MAKELEVEL)" = 0 ] ; then \
	      echo "" ; \
	      echo gmake[$(MAKELEVEL)]: $(MAKE) -C $(CODEDIR)/$$i $@ ; \
	   else \
	      echo $@[$(MAKELEVEL)]:"$(MAKEINDENT)"$$i ; \
	   fi ; \
	   $(MAKE) -C $$i $@ ; \
	done

  # Help.
  help ::
	-@ echo ""
	-@ echo "System-oriented rules for building the Miriad system"
	-@ echo "===================================================="
	-@ echo ""
	-@ echo "Where a target is defined as a variable (shown in upper"
	-@ echo "case) the value of the variable may be printed via the"
	-@ echo "'show' target."
	-@ echo ""
	-@ echo "Targets defined in GNUmakedefs:"
	-@ echo "-------------------------------"
	-@ echo "     allsys: (default target) recursively rebuild everything."
     ifdef MIRRCS
	-@ echo "     chkout: recursively check out all sources."
     endif
	-@ echo "    sysdirs: create all system directories."
	-@ echo "  (SYSDIRS): create a system directory."
	-@ echo "   cleansys: recursively purge selected files from the"
	-@ echo "             system directories, usually in preparation for"
	-@ echo "             a complete rebuild."

else
  # Programmer-oriented rules.
  #---------------------------
  .PHONY : all clean cleaner cleanest help

  all ::

  clean ::
	-  $(RM) *~ *% a.out core

  cleaner :: clean
	-@ FILES="$(wildcard $(MIRSRCS))" ; DLIST="" ; \
	   for i in $$FILES ; do \
	     [ -w $$i -o -h $$i ] || DLIST="$$i $$DLIST" ; \
	   done ; \
	   if [ "$$DLIST" != "" ] ; then \
	     echo "" ; \
	     echo "Delete up-to-date, checked-in file(s):" ; \
	     echo $$DLIST ; \
	     $(RM) $$DLIST ; \
	   fi

  cleanest :: cleaner ;

  # Help.
  help ::
	-@ echo ""
	-@ echo "Programmer-oriented rules for code development"
	-@ echo "=============================================="
	-@ echo ""
	-@ echo "Where a target is defined as a variable (shown in upper"
	-@ echo "case) the value of the variable may be printed via the"
	-@ echo "'show' target."
	-@ echo ""
	-@ echo "Targets defined in GNUmakedefs:"
	-@ echo "-------------------------------"
	-@ echo "        all: (default target) rebuild all in this directory."
	-@ echo "      clean: delete intermediate files (e.g. .o, .i, etc.)."
	-@ echo "    cleaner: clean, and also delete preprocessed files (e.g."
	-@ echo "             .f, .c, .doc), dependency lists, and source"
	-@ echo "             files checked out without a lock (no write"
	-@ echo "             permission)."
	-@ echo "   cleanest: cleaner, and also delete generated files (e.g."
	-@ echo "             the object library or executables depending on"
	-@ echo "             the context)."
endif


# Rules common to system and programmer.
#---------------------------------------
.PHONY : command eval_vars null printenv show

# Target without any dependencies or commands which when used as a dependency
# forces a target to be remade.
FORCE :

# Useful for just remaking included files, especially dependency lists.
null : ;

# Rules for updating makedefs and the makefile itself if the RCS repositories
# are present.
ifdef MIRRCS
  ifneq "$(wildcard $(MIRRCS)/GNUmakedefs,v)" ""
    $(MIRROOT)/GNUmakedefs : $(MIRRCS)/GNUmakedefs,v
	 -@ $(CO) $(COFLAGS) $< $@
	 -@ chmod 664 $@
  endif

  ifneq "$(wildcard $(RCSDIR)/GNUmakefile,v)" ""
    GNUmakefile : $(RCSDIR)/GNUmakefile,v
	  @ $(CO) $(COFLAGS) $< $@
	  @ chmod 444 $@
  endif
endif

# DIY rule.
command :
	$(COMMAND)

# Print the environment as seen by makefile rules.
printenv :
	-@ printenv | sort

# Rule for eval'ing variable definitions into environment variables.
eval_vars :
        ifdef VARS
	   @ echo "$(foreach V,$(VARS),$V=\"$($V)\") ; export $(VARS)"
        endif

# Print specified variable definitions.
show_vars :
	@ $(foreach V, $(VARS), \
		@ echo $V=$($V) $;)

help::
	-@ echo ""
	-@ echo "General and diagnostics rules defined in GNUmakedefs"
	-@ echo "----------------------------------------------------"
	-@ echo "       null: do nothing except to update the makefile and"
	-@ echo "             all included files as a side effect."
	-@ echo "    command: execute COMMAND."
	-@ echo "   printenv: print the environment as seen by makefile"
	-@ echo "             commands."
	-@ echo "  eval_vars: print variables specified by VARS in a form"
	-@ echo "             suitable for eval'ing into the environment."
	-@ echo "       help: print this."
	-@ echo "  show_vars: print variables specified by VARS."
	-@ echo "       show: print all makefile variables."

show ::
	-@ echo ""
	-@ echo "Variables defined in GNUmakedefs"
	-@ echo "================================"
	-@ echo ""
	-@ echo "MIRROOT    = $(MIRROOT)"
	-@ echo "MIRARCH    = $(MIRARCH)"
	-@ echo ""
	-@ echo "MIRDIR     = $(MIRDIR)"
	-@ echo "THISDIR    = $(THISDIR)"
	-@ echo "MAKEMODE   = $(MAKEMODE)"
	-@ echo ""
	-@ echo "Preprocessors, compilers, etc. and their flags."
	-@ echo "-----------------------------------------------"
	-@ echo "CO         = $(CO)"
	-@ echo "COFLAGS    = $(COFLAGS)"
	-@ echo ""
	-@ echo "RATTY      = $(RATTY)"
	-@ echo "RATFLAGS   = $(RATFLAGS)"
	-@ echo ""
	-@ echo "FC         = $(FC)"
	-@ echo "FCSTD      = $(FCSTD)"
	-@ echo "FCOPT      = $(FCOPT)"
	-@ echo "FCDBG      = $(FCDBG)"
	-@ echo ""
	-@ echo "INTF2C     = $(INTF2C)"
	-@ echo "F2CFLAGS   = $(F2CFLAGS)"
	-@ echo ""
	-@ echo "CPPSTD     = $(CPPSTD)"
	-@ echo "CPPOPT     = $(CPPOPT)"
	-@ echo "CPPDBG     = $(CPPDBG)"
	-@ echo ""
	-@ echo "CC         = $(CC)"
	-@ echo "CSTD       = $(CSTD)"
	-@ echo "COPT       = $(COPT)"
	-@ echo "CDBG       = $(CDBG)"
	-@ echo ""
	-@ echo "AR         = $(AR)"
	-@ echo "ARFLAGS    = $(ARFLAGS)"
	-@ echo "RANLIB     = $(RANLIB)"
	-@ echo ""
	-@ echo "LDSTD      = $(LDSTD)"
	-@ echo "LDOPT      = $(LDOPT)"
	-@ echo "LDDBG      = $(LDDBG)"
	-@ echo "STRIP      = $(STRIP)"
	-@ echo ""
	-@ echo "MANDB      = $(MANDB)"
	-@ echo "GUIDES     = $(GUIDES)"
	-@ echo "LATEX      = $(LATEX)"
	-@ echo "MAKEINDEX  = $(MAKEINDEX)"
	-@ echo "DVIPS      = $(DVIPS)"
	-@ echo "FIG2DEV    = $(FIG2DEV)"
	-@ echo "GNUPLOT    = $(GNUPLOT)"
	-@ echo "GZIP       = $(GZIP)"
	-@ echo ""
	-@ echo "Third-party libraries"
	-@ echo "---------------------"
	-@ echo "RPFITSLIB  = $(RPFITSLIB)"
	-@ echo "LINPACKLIB = $(LINPACKLIB)"
	-@ echo "PGPLOT     = $(PGPLOT)"
	-@ echo "PNG        = $(PNG)"
	-@ echo "PGPLOTLIB  = $(PGPLOTLIB)"
	-@ echo "WCSLIB     = $(WCSLIB)"
	-@ echo "X11LIB     = $(X11LIB)"
	-@ echo "X11LIBS    = $(X11LIBS)"
	-@ echo "XTRALIBS   = $(XTRALIBS)"
	-@ echo "READLINELIB= $(READLINELIB)"
	-@ echo ""
	-@ echo "Fundamental variables."
	-@ echo "----------------------"
	-@ echo "LC_COLLATE = $(LC_COLLATE)"
	-@ echo "LC_TYPE    = $(LC_TYPE)"
	-@ echo ""
	-@ echo "MAKEFLAGS  = $(MAKEFLAGS)"
	-@ echo ""
	-@ echo "SHELL   =$(SHELL)"
	-@ echo "PID     =$(PID)"
	-@ echo "comma   =$(comma)"
	-@ echo "<null>  =<$(null)>"
	-@ echo "<space> =<$(space)>"
	-@ echo "<;>     =<" $(;)		echo ">"
	-@ echo ""
	-@ echo ""
	-@ echo "Miriad code directories"
	-@ echo "-----------------------"
	-@ echo "MIRSCRPD   = $(MIRSCRPD)"
	-@ echo "MIRINCD    = $(MIRINCD)"
	-@ echo "MIRINCOD   = $(MIRINCOD)"
	-@ echo "MIRTOOLD   = $(MIRTOOLD)"
	-@ echo "MIRSUBSD   = $(MIRSUBSD)"
	-@ echo "MIRPROGD   = $(MIRPROGD)"
	-@ echo "MIRSPECD   = $(MIRSPECD)"
	-@ echo "MIRGUIDD   = $(MIRGUIDD)"
	-@ echo ""
	-@ echo "MIRSDOCD   = $(MIRSDOCD)"
	-@ echo "MIRDOCD    = $(MIRDOCD)"
	-@ echo ""
	-@ echo "MIRRCS     = $(MIRRCS)"
	-@ echo "CODESUBD   = $(CODESUBD)"
	-@ echo "CODEDIR    = $(CODEDIR)"
	-@ echo "RCSDIR     = $(RCSDIR)"
	-@ echo "CHKDIR     = $(CHKDIR)"
	-@ echo "SUBDIRS    = $(SUBDIRS)"
	-@ echo "CODESUBS   = $(CODESUBS)"
	-@ echo ""
	-@ echo "Miriad system directories"
	-@ echo "-------------------------"
	-@ echo "MIRARCHD   = $(MIRARCHD)"
	-@ echo "MIRAUXD    = $(MIRAUXD)"
	-@ echo "MIRBIND    = $(MIRBIND)"
	-@ echo "MIRLIBD    = $(MIRLIBD)"
	-@ echo "MIRMAND    = $(MIRMAND)"
	-@ echo "MIRMAN1D   = $(MIRMAN1D)"
	-@ echo "MIRTMPD    = $(MIRTMPD)"
	-@ echo ""
	-@ echo "MIRHTMLD   = $(MIRHTMLD)"
	-@ echo "MIRHDOCD   = $(MIRHDOCD)"
	-@ echo "MIRFTPD    = $(MIRFTPD)"
	-@ echo ""
	-@ echo "SYSDIRS    = $(SYSDIRS)"
	-@ echo ""
      ifeq "$(MAKEMODE)" "programmer"
	-@ echo "Programmer directories"
	-@ echo "----------------------"
	-@ echo "PGMRROOT   = $(PGMRROOT)"
	-@ echo "PGMRINCD   = $(PGMRINCD)"
	-@ echo "PGMRINOD   = $(PGMRINOD)"
	-@ echo "PGMRLIBD   = $(PGMRLIBD)"
	-@ echo "PGMRBIND   = $(PGMRBIND)"
	-@ echo ""
     endif
	-@ echo "Miriad source list"
	-@ echo "------------------"
	-@ echo "ALLSUBD    = $(ALLSUBD)"
	-@ echo "MIRSRCS    = $(MIRSRCS)"
