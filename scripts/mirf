#!/bin/sh
#-----------------------------------------------------------------------------
# Usage: mirf [-d] [file]
#-----------------------------------------------------------------------------
# sed script that does basic reformatting of Miriad Fortran source code,
# trying to achieve some measure of consistency of style.
#
# *** WARNING: It may generate lines longer than 72 characters. ***
#
# If file is omitted input is taken from stdin.
#
# Options:
#   -d     De-tabbify, shifting left by two spaces.  Where tabs have been used
#          inconsistently in a source file, 'mirf -d' should be used within an
#          editor to filter tabbed blocks of text as appropriate.  mirf uses
#          the following sequence of operations:
#            1. use the unix 'expand' utility to replace tabs with blanks,
#            2. remove trailing blanks,
#            3. remove the two blanks in columns 7 and 8 in non-comment
#               lines.
#   -l     Downcase Fortran keywords.
#
# Notes:
#    1) As at 2010/08/19, the following continuation characters have been used
#       in Miriad:
#
#           *   7694
#           +   2779
#         0-9    494
#           :    344
#           -    135
#           &     19
#         A-E     14
#           %     11
#           .      2
#           c      1
#
#       In view of its prevalance, we have settled on '*'.
#
# Original: 2010/08/19 MRC (from ancient lore).
# $Id$
#-----------------------------------------------------------------------------
  DETAB=
  LOWER=
  FILE="-"

  while [ "$#" -gt 0 ]
  do
    case $1 in
      -d)
        DETAB=1
        ;;
      -l)
        LOWER=1
        ;;
      *)
        FILE="$1"
        break
        ;;
    esac

    [ "$2" = "" ] && break

    shift
  done

  expand "$FILE" |
    if [ "$DETAB" ] ; then
      sed -e '{s/  *$//;/^[ 1-9]/s/^\(......\)  /\1/;}'
    else
      cat
    fi |
    if [ "$LOWER" ] ; then
      # Downcase the code.
      sed -e 's|  *$||' \
          -e 's|^C|c|' \
          -e '/^c/b' \
          -e '/^  *IMPLICIT NONE$/d' \
          -e '/^  *IMPLICIT none$/d' \
          -e 's| PROGRAM *| program |' \
          -e 's| SUBROUTINE *| subroutine |' \
          -e 's| FUNCTION *| function |' \
          -e 's| INCLUDE | include |' \
          -e 's| PARAMETER | parameter |' \
          -e 's| LOGICAL | logical |' \
          -e 's| INTEGER | integer |' \
          -e 's| REAL | real |' \
          -e 's| DOUBLE PRECISION | double precision |' \
          -e 's| CHARACTER | character |' \
          -e 's| EXTERNAL | external |' \
          -e 's| COMMON | common |' \
          -e 's| DATA | data |' \
          -e 's| CALL | call |' \
          -e 's| WRITE\( *(\)| write\1|' \
          -e 's| FORMAT\( *(\)| format\1|' \
          -e 's|\([0-9]\)\.0*E\([-+0-9]\)|\1e\2|g' \
          -e 's|\([0-9]\)\.0*D\([-+0-9]\)|\1d\2|g' \
          -e 's|\.EQ\.|.eq.|g' \
          -e 's|\.NE\.|.ne.|g' \
          -e 's|\.GE\.|.ge.|g' \
          -e 's|\.GT\.|.gt.|g' \
          -e 's|\.LE\.|.le.|g' \
          -e 's|\.LT\.|.lt.|g' \
          -e 's|\.EQV\.|.eqV.|g' \
          -e 's|\.NEQV\.|.neqv.|g' \
          -e 's|\.NOT\. |.NOT.|g' \
          -e 's|\.OR\.|.or.|g'   \
          -e 's|\.AND\.|.and.|g' \
          -e 's| ELSE *IF *(| else if (|' \
          -e 's| ELSE$| else|' \
          -e 's| IF *(| if (|'   \
          -e 's|) *THEN|) then|' \
          -e 's| END *IF$| endif|' \
          -e 's| DO *WHILE *(| do while (|' \
          -e 's| DO | do |' \
          -e 's| END *DO$| enddo|' \
          -e 's| GOTO *\([1-9][0-9]*$\)| goto \1|' \
          -e 's| RETURN$| return|' \
          -e 's|^ *END$|      end|'
    else
      cat
    fi |
      sed -e 's|  *$||' \
          -e 's|^C|c|' \
          -e '/^*[^*][^*]/s|*|c|' \
          -e '/^c/s|'\`\`'|"|g' \
          -e '/^c/s|'\'\''|"|g' \
          -e '/^c-\{72\}/s|-||' \
          -e '/^c\*\{72\}/s|\*||' \
          -e '/^c/b' \
          -e 's|^     [^ ]|     *|' \
          -e '/^  *implicit none$/d' \
          -e 's|\([0-9]\)\.0*e\([-+0-9]\)|\1e\2|g' \
          -e 's|\([0-9]\)\.0*d\([-+0-9]\)|\1d\2|g' \
          -e 's|\([0-9]\)\.$|\1.0|g' \
          -e 's|\([-+*/=.,() ][0-9][0-9]*\)\.\([-+*/,() ]\)|\1.0\2|g' \
          -e 's|\([-+*/=.,() ][0-9][0-9]*\)\.\([-+*/,() ]\)|\1.0\2|g' \
          -e 's|parameter(|parameter (|' \
          -e 's|( |(|g' \
          -e 's| )|)|g' \
          -e 's|)\([a-zA-Z]\)|) \1|g' \
          -e 's| \.eq\.|.eq.|g' \
          -e 's| \.ne\.|.ne.|g' \
          -e 's| \.ge\.|.ge.|g' \
          -e 's| \.gt\.|.gt.|g' \
          -e 's| \.le\.|.le.|g' \
          -e 's| \.lt\.|.lt.|g' \
          -e 's| \.eqv\.|.eqv.|g' \
          -e 's| \.neqv\.|.neqv.|g' \
          -e 's|\.eq\. |.eq.|g' \
          -e 's|\.ne\. |.ne.|g' \
          -e 's|\.ge\. |.ge.|g' \
          -e 's|\.gt\. |.gt.|g' \
          -e 's|\.le\. |.le.|g' \
          -e 's|\.lt\. |.lt.|g' \
          -e 's|\.not\. |.not.|g' \
          -e 's|\.eqv\. |.eqv.|g' \
          -e 's|\.neqv\. |.neqv.|g' \
          -e 's|\([^ ]\)\.or\.|\1 .or.|g'   \
          -e 's|\.or\.\([^ ]\)|.or. \1|g'   \
          -e 's|\([^ ]\)\.and\.|\1 .and.|g' \
          -e 's|\.and\.\([^ ]\)|.and. \1|g' \
          -e 's| write  *(| write(|'   \
          -e 's| format  *(| format(|'   \
          -e 's| call  *\([a-zA-Z][a-zA-Z0-9]*\)  *(| call \1(|'   \
          -e 's| if(| if (|'   \
          -e 's|)then|) then|' \
          -e 's|end if|endif|' \
          -e '/^ *do /s|\([^ ]\)=|\1 =|g' \
          -e '/^ *do /s|=\([^ ]\)|= \1|g' \
          -e '/^ *do /s|^\([^,]*\),\([^ ][^,]*\)$|\1, \2|g' \
          -e 's| dowhile\([ (]\)| do while\1|' \
          -e 's| do while(| do while (|' \
          -e 's| end do$| enddo|' \
          -e 's| goto *\([1-9][0-9]*$\)| goto \1|' \
