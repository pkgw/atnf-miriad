#!/bin/sh
#-----------------------------------------------------------------------------
# Usage: mirsync -c -d [-h <host>] [-u <user>]
#-----------------------------------------------------------------------------
# mirsync uses rsync to update a Miriad installation from the master at ATNF.
# It requires ssh access to an ATNF computer, venice.atnf.csiro.au by default.
#
# mirsync refreshes each file (apart from MIRRC and MIRRC.sh) that resides in
# the top-level Miriad directory, $MIR, and is also present on the master.  It
# recursively refreshes each subdirectory of $MIR, DELETING anything it finds
# within each subdirectory tree that is not present on the master (except for
# RCS symlinks and $MIR/*/GNUmakedefs).  Files and subdirectories in $MIR that
# are not present on the master remain untouched.
#
# With a few exceptions (see below) mirsync only updates files or subdirectory
# hierarchies that are already present in the local installation, i.e. it
# wouldn't create or update $MIR/darwin_x86/ if it didn't already exist.  To
# fetch a file or subdirectory that does not already exist within $MIR simply
# create an empty version (e.g. mkdir $MIR/darwin_x86) before running mirsync.
#
# Options:
#   -c     Fetch code and compiled documentation only, no binaries.  File
#          modification times are not preserved in this case on the assumption
#          that the code will be compiled locally - old timestamps may mislead
#          gmake.  Instead checksum comparison is used to identify changes and
#          this can be slow.  Modification times are preserved if this option
#          is not used as this allows size/time comparison which is much more
#          efficient.
#   -d     Dry-run, don't change anything.
#   -h <host>
#          Specify the name of the ATNF host from which to rsync.  External
#          access to the ATNF network is only allowed via venice.atnf.csiro.au
#          and this is the default.  Within the ATNF, atlas, the host that
#          serves the Miriad directory hierarchy, is a better choice.
#   -u <user>
#          Specify your ATNF account name if your local account name differs.
#
# Exceptions:
#   $MIR/*/GNUmakedefs	...never updated.
#   $MIR/.../RCS	...never updated.
#
#   $MIR/DISCLAIMER	...always updated.
#   $MIR/cat/		...always updated.
#   $MIR/doc/		...always updated.
#   $MIR/html/		...always updated.
#   $MIR/man/		...always updated.
#   $MIR/scripts/	...always updated.
#   $MIR/specdoc/	...always updated.
#
# Original: 2006/11/28 Mark Calabretta, ATNF
# $Id$
#-----------------------------------------------------------------------------

  trap 'exit 1' 1 2 3 15

# Sanity checks.
  if [ "$MIR" = "" -o ! -d "$MIR" ]
  then
    echo 'mirsync: $MIR is not defined or does not exist.' 1>&2
    exit 1
  fi

  cd $MIR || exit 1

# Check that we're not trying to update the master itself!
  ATMIR=/nfs/atapplic/miriad
  if [ "$MIR" = "$ATMIR" ]
  then
    # The master's inode number will almost certainly be unique.
    INODE=`ls -d -i $MIR | awk '{print $1}'`
    if [ "$INODE" = 692036 ]
    then
      echo "mirsync: ERROR - attempting reflexive update of master." 1>&2
      exit 1
    fi
  fi


# Parse options.
  DOBIN=1
  DRYRUN=
  RSYNC=rsync
  SYNCHOST=venice.atnf.csiro.au
  SYNCUSER=

  while [ "$#" -gt 0 ]
  do
    case $1 in
    -c)
      DOBIN=
      ;;
    -d)
      # Dry-run only.
      DRYRUN=1
      RSYNC="$RSYNC --dry-run"
      ;;
    -h)
      # Remote host.
      shift
      SYNCHOST="$1"
      ;;

    -u)
      # Remote user
      shift
      SYNCUSER="$1"
      ;;

    *)
      exec 1>&2
      echo ""
      echo "Usage: mirsync -c -d [-h <host>] [-u <user>]"
      exit 1
      ;;
    esac

    [ "$2" = "" ] && break

    shift
  done

  [ "$SYNCUSER" = "" ] || SYNCHOST=$SYNCUSER@$SYNCHOST

  echo

  if [ "$DRYRUN" = "" ]
  then
    echo "Updating Miriad files from the ATNF master at"
  else
    echo "Doing a dry-run update of Miriad files from the ATNF master at"
  fi
  echo "$SYNCHOST:$ATMIR/..."

  if [ "$DOBIN" = "" ]
  then
    echo "Considering code and compiled documentation only, no binaries."
  fi

  echo


  # Add rsync options.
  RSYNC="$RSYNC --verbose"
  RSYNC="$RSYNC --compress --rsh=ssh --rsync-path=/usr/local/bin/rsync"
  RSYNC="$RSYNC --delete --links --perms --recursive"
  if [ "$DOBIN" = 1 ]
  then
    RSYNC="$RSYNC --times"
  else
    RSYNC="$RSYNC --checksum"
  fi
  RSYNC="$RSYNC --exclude=RCS --exclude=/*/GNUmakedefs"

  FILES="GNUmakedefs GNUmakefile INSTALL.html configure configure.ac"
  FILES="$FILES progguide.ps progguide_US.ps.gz"
  FILES="$FILES userguide.ps userguide_US.ps.gz"

  DIRS="config etc guides inc linpack prog scripts spec subs tests tools"
  [ "$DOBIN" = 1 ] && DIRS="$DIRS darwin_x86 linux linux64 sun4sol"

# Files that must be present.
  SRC="$ATMIR/DISCLAIMER"

# Files to update only if already present.
  for FILE in $FILES
  do
    [ -f "$MIR/$FILE" ] && SRC="$SRC $ATMIR/$FILE"
  done

# Miriad-common subdirectories are always updated verbatim.
  SRC="$SRC $ATMIR/cat $ATMIR/doc $ATMIR/html $ATMIR/man $ATMIR/scripts"
  SRC="$SRC $ATMIR/specdoc"

# Other subdirectories to update (verbatim) only if already present.
  for DIR in $DIRS
  do
    [ -d "$MIR/$DIR" ] && SRC="$SRC $ATMIR/$DIR"
  done

  $RSYNC $SYNCHOST:"$SRC" .

  if [ "$DRYRUN" = 1 ]
  then
    echo
    echo "NOTE: this was a dry-run only, NO FILES WERE UPDATED."
    echo
  fi

  exit
